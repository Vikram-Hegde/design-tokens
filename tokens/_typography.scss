@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use './mixins' as *;
@use '../config' as config;

$font-sizes: ();

// typescale values from type-scale.com
$type-ratios: (
	minorSecond: 1.067,
	majorSecond: 1.125,
	minorThird: 1.2,
	majorThird: 1.25,
	perfectFourth: 1.333,
	augmentedFourth: 1.414,
	perfectFifth: 1.5,
	goldenRatio: 1.618,
);

@function type-ratio($key) {
	@return map.get($type-ratios, $key);
}

$config-base: map.get(config.$font-config, base);
$config-ratio: map.get(config.$font-config, type-ratio);
$config-steps: map.get(config.$font-config, steps);

$base-size: if($config-base != null, $config-base, 1rem);
$type-ratio: type-ratio(
	if($config-ratio != null, $config-ratio, 'perfectFourth')
);
$steps: if($config-steps != null, $config-steps, 6);

$level-size: $base-size;

// Headings
@for $i from 1 through $steps {
	$level-size: $level-size * $type-ratio;
	// $font-sizes: map.set($font-sizes, h#{$i}, $level-size);

	$fluid-reduction: if($level-size > 4, 0.5, 0.33);

	$fluid-min: math.max(
		$base-size - 0.5rem,
		$level-size - ($fluid-reduction * $level-size)
	);
	$fluid-scaler: calc(($level-size - $fluid-min) + 4vw);
	$font-sizes: map.set(
		$font-sizes,
		$i * 100,
		clamp(#{$fluid-min}, #{$fluid-scaler}, #{$level-size})
	);
}

@if meta.global-variable-exists('font-sizes', 'config') {
	$font-sizes: map.merge($font-sizes, config.$font-sizes);
}

:root {
	@include map('--fs', $font-sizes);
}
