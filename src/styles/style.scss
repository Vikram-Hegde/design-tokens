/**
	* TODO: A neater design system generator
	* TODO: typography system using clamp
	* TODO: spacing system using clamp
	* * Try making a dark theme generator. automatically :sparkle:
*/

@use './reset' as *;
@use './mixins' as *;
@use './functions' as *;

body {
	@extend %centered;
	background-color: hsl(var(--surface--300));
}

.box-row {
	display: flex;

	& + & {
		margin-block-start: 1rem;
	}
}

.box-row {
	position: relative;

	&::before {
		letter-spacing: 1px;
		display: block;
		font-size: 2rem;
		position: absolute;
		left: -6rem;
	}
}

.scss::before {
	color: hsl(var(--text-300));
	content: 'SASS';
}

.range {
	--thumb-block: 30px;
	--thumb-inline: 15px;
	--track-block: 10px;
	--track-inline: 100%;
	--background: linear-gradient(to right, #{lgbtq(12, hsl(0 80% 70%))});
	@extend %range;
}

.box {
	height: 100px;
	width: 100px;
}

// Presentation ONLY
$idx: 0;

.scss > .box {
	transition: 0.15s cubic-bezier(0.075, 0.82, 0.165, 1);
	transition-property: scale, border-radius;
}

@for $i from -2 through 2 {
	@if $i >= 0 {
		$i: $i + 1;
	}
	$idx: $idx + 1 !global;
	.scss > .box:nth-child(#{$idx}) {
		background-color: hsl(var(--surface-#{$i * 100}));
		&:hover {
			scale: calc(1 + ($idx * 0.1));
			border-radius: $idx * 3;
			z-index: 2;
		}
	}
}

$idx1: 0;
@for $i from -2 through 2 {
	@if $i >= 0 {
		$i: $i + 1;
	}
	$idx1: $idx1 + 1 !global;
	.text-#{$idx1 * 100} {
		color: hsl(var(--text-#{$i * 100}));
	}
}

.box-row:has(.text-100) {
	display: flex;
	flex-direction: column;
	background-color: hsl(var(--surface--300));
	padding: 1rem;
}

// very exciting that this works, proud moment.
// .text-box {
// 	--hue-add: 90;
// }

// END
