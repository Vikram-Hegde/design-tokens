@use 'sass:map';
@use 'sass:color';
@use 'sass:math';
@use './functions' as func;
@use './config' as config;

$colors: ();

@mixin generate($step, $no, $name: shade, $theme: light) {
	@for $var from (0 - $no) to $no {
		$idx: $var;
		$lightness: null;
		// extending the functionality purposes, keep it for later.
		$saturation: #{var(--s)};

		@if $idx >= 0 {
			$idx: 1 + $idx; // for better naming
		}

		$lightness: func.lightness($theme, $name, $step, $var, $no, $idx);

		$colors: map.set(
			$colors,
			$theme,
			$name,
			#{$idx * 100},
			#{calc(var(--h) + var(--hue-add, 0)) #{$saturation} #{$lightness}}
		) !global;
	}
}

@mixin color-scheme($type: light) {
	@if config.$colors != null or config.$colors != () {
		$colors: map.deep-merge($colors, config.$colors) !global;
	}

	// checks for values which is common for both dark and light.
	@each $prop, $value in $colors {
		@if $type != dark {
			@if type-of($value) != 'map' {
				--#{$prop}: #{$value};
			}
		}
	}

	@each $prop, $value in map.get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

$auto: map.get(config.$config, auto-generate);
$stepShades: map.get(config.$config, stepShades);
$stepText: map.get(config.$config, stepText);
$numberOfTextShades: map.get(config.$config, numberOfTextShades);
$numberOfSurfaceShades: map.get(config.$config, numberOfSurfaceShades);
$cascadingColors: map.get(config.$config, cascadingColors);

@if $auto {
	%light {
		@include generate($stepShades, $numberOfSurfaceShades, surface);
		@include generate($stepText, $numberOfTextShades, text);
	}
	:root {
		@extend %light;
	}

	@media (prefers-color-scheme: dark) {
		%dark {
			--s: calc(#{color.saturation(config.$base)} - 10%);
			@include generate($stepShades, $numberOfSurfaceShades, surface, dark);
			@include generate($stepText, $numberOfTextShades, text, dark);
		}

		:root {
			@extend %dark;
		}
	}
}

@if $cascadingColors {
	[generated-colors='light'] {
		@extend %light;
		@include color-scheme();
	}
	[generated-colors='dark'] {
		--s: calc(#{color.saturation(config.$base)} - 10%);
		@extend %dark;
		@include color-scheme(dark);
	}
}

:root {
	@if $auto {
		--h: #{color.hue(config.$base)};
		--s: #{color.saturation(config.$base)};
		--l: #{color.lightness(config.$base)};
	}
	@include color-scheme();
}

@media (prefers-color-scheme: dark) {
	:root {
		@include color-scheme(dark);
	}
}
