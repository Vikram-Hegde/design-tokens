@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use 'sass:color';

$colors: ();
$base: hsl(220 45% 55%);

@mixin generate-vars($base, $step, $no, $name) {
	@for $var from (0 - $no) through $no {
		$idx: $var;
		@if $idx >= 0 {
			$idx: 1 + $idx;
		}
		$colors: map.set(
			$colors,
			'light',
			$name,
			#{$idx * 100},
			hsl(var(--h) var(--s) min(var(--l) + ($step * $var), 95%))
		) !global;
		$colors: map.set(
			$colors,
			'dark',
			$name,
			#{$idx * 100},
			hsl(var(--h) var(--s) max(100% - (var(--l) + ($step * $var)), 5%))
		) !global;
	}
}

@include generate-vars($base, 25%, 2, surface);

// @debug $colors;

@mixin color-scheme($type: light) {
	@each $prop, $value in map-get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

:root {
	--h: #{color.hue($base)};
	--s: #{color.saturation($base)};
	--l: #{color.lightness($base)};
	@include color-scheme();
}

@media (prefers-color-scheme: dark) {
	:root {
		--s: calc(#{color.saturation($base)} - 5%);
		@include color-scheme(dark);
	}
}

$idx: 0;

@for $i from -2 through 2 {
	@if $i >= 0 {
		$i: $i + 1;
	}
	$idx: $idx + 1 !global;
	.scss > .box:nth-child(#{$idx}) {
		background-color: var(--surface-#{$i * 100});
	}
}

// @debug list.length(map.get($colors, 'light', 'text'));
