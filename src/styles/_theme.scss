@use 'sass:map';
@use 'sass:color';

$colors: ();

$misc: (
	light: (
		surface: (
			900: hsl(var(--h) var(--l) 98%),
		),
	),
	dark: (
		surface: (
			900: hsl(var(--h) var(--l) 2%),
		),
	),
);

/// Base value must be provided to generate the scheme.
$base: hsl(220 50% 50%);

/// A custom mixin to generate the shades from the provided base value.
/// @require $base - Requires the base value to be defined
/// @param {percentage} $step Provide a step value
/// @param {number} $no Number of shades on either sides
/// @param {string} $name Name of the nested map
/// @param {string} $theme [light] Define theme
/// @output Map

@mixin generate($step, $no, $name, $theme: light) {
	@for $var from (0 - $no) through $no {
		$idx: $var;
		$color: null;
		@if $idx >= 0 {
			$idx: 1 + $idx;
		}
		@if $theme == 'light' {
			$color: hsl(var(--h) var(--s) min(var(--l) + ($step * $var), 95%));
		} @else {
			$color: hsl(
				var(--h) var(--s) max(100% - (var(--l) + ($step * $var)), 5%)
			);
		}
		$colors: map.set($colors, $theme, $name, #{$idx * 100}, $color) !global;
	}
}

/// Color scheme generator
/// @param {string} $type [light] Specify Theme
/// @param {Boolean} $auto [true] If you want to use auto scheme generator
/// @output - CSS Variables
@mixin color-scheme($type: 'light', $auto: true) {
	@if $auto {
		@include generate(20%, 2, surface, $type);
	}
	@if type-of($misc == 'map') {
		$colors: map.deep-merge($colors, $misc) !global;
	}
	@each $prop, $value in map.get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

:root {
	--h: #{color.hue($base)};
	--s: #{color.saturation($base)};
	--l: #{color.lightness($base)};
	@include color-scheme();
}

@media (prefers-color-scheme: dark) {
	:root {
		--s: calc(#{color.saturation($base)} - 10%);
		@include color-scheme(dark);
	}
}

@debug $colors;

$idx: 0;

.scss {
	--h: 360;
}
@for $i from -2 through 2 {
	@if $i >= 0 {
		$i: $i + 1;
	}
	$idx: $idx + 1 !global;
	.scss > .box:nth-child(#{$idx}) {
		background-color: var(--surface-#{$i * 100});
	}
}
