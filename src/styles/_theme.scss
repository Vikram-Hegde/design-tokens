@use 'sass:map';
@use 'sass:color';
@use 'sass:math';

$colors: ();

// any miscellaneous colors can be added here.
$misc: (
	light: (
		surface: (
			900: hsl(var(--h) var(--s) 95%),
		),
	),
	dark: (
		surface: (
			900: hsl(var(--h) var(--s) 10%),
		),
	),
);

/// Base value must be provided to generate the scheme.
$base: hsl(220 50% 50%);

@mixin generate($step, $no, $name, $theme: light) {
	@for $var from (0 - $no) through $no {
		$idx: $var;
		$lightness: null;
		$saturation: #{var(--s)};
		@if $idx >= 0 {
			$idx: 1 + $idx;
		}

		@if $theme == light {
			$lightness: min(var(--l) - ($step * $var), 95%);
			@if $name == text {
				$lightness: math.clamp(5%, $step * ($no + 1) + ($idx * $step), 35%);
			}
		} @else if $theme == dark {
			$lightness: max(100% - (var(--l) - ($step * $var)), 5%);
			@if $name == text {
				$lightness: math.clamp(50%, (95% - $step) - ($step * $var), 100%);
			}
		}

		$colors: map.set(
			$colors,
			$theme,
			$name,
			#{$idx * 100},
			hsl(var(--h) #{$saturation} #{$lightness})
		) !global;
	}
}

@mixin color-scheme(
	$type: 'light',
	$auto: false,
	$step: 15%,
	$no: 2,
	$name: null
) {
	// TESTS
	@if $auto and $name == null {
		@error 'Specify a name for your colors. eg: surface, text etc.';
	}
	// END

	@if $auto {
		@include generate($step, $no, $name, $type);
	}

	@if $misc != null or $misc != () {
		$colors: map.deep-merge($colors, $misc) !global;
	}

	@each $prop, $value in $colors {
		@if type-of($value) != 'map' {
			--#{$prop}: #{$value};
		}
	}

	@each $prop, $value in map.get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

:root {
	--h: #{color.hue($base)};
	--s: #{color.saturation($base)};
	--l: #{color.lightness($base)};
	@include color-scheme(light);
}

@media (prefers-color-scheme: dark) {
	:root {
		--s: calc(#{color.saturation($base)} - 10%);
		@include color-scheme(dark, true, 15%, 3, surface);
		@include color-scheme(dark, true, 5%, 2, text);
		// @include color-scheme(dark, true, $name: text, $no: 2, $step: 5%);
	}
}
