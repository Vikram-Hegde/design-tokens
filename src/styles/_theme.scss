@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use 'sass:color';

$colors: ();
$base: hsl(220 45% 55%);

@mixin generate-shades($base, $step, $no) {
	@for $var from (0 - $no) through $no {
		$idx: $var + $no;
		$shade: lightness($base);
		$colors: map.set(
			$colors,
			'light',
			'text',
			#{$var * 100},
			scale-color($base, $lightness: math.min($step * $idx, 95%))
		) !global;
	}
}

@mixin generate-vars($base, $step, $no) {
	@for $var from (0 - $no) through $no {
		$idx: $var + $no;
		$colors: map.set(
			$colors,
			'light',
			'text',
			#{$var * 100},
			hsl(var(--h) var(--s) calc(var(--l) + ($step * $var)))
		) !global;
		$colors: map.set(
			$colors,
			'dark',
			'text',
			#{$var * 100},
			hsl(var(--h) var(--s) calc(100% - (var(--l) + ($step * $var))))
		) !global;
	}
}

@include generate-vars($base, 20%, 2);

// @debug $colors;

@mixin color-scheme($type: light) {
	@each $prop, $value in map-get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

:root {
	--h: #{color.hue($base)};
	--s: #{color.saturation($base)};
	--l: #{color.lightness($base)};

	--base: (var(--h) var(--s) var(--l));
	@include color-scheme();
}

@media (prefers-color-scheme: dark) {
	:root {
		--s: calc(#{color.saturation($base)} - 10%);
		@include color-scheme(dark);
	}
}

$idx: 0;

@for $i from -2 through 2 {
	$idx: $idx + 1 !global;
	.scss > .box:nth-child(#{$idx}) {
		background-color: var(--text-#{$i * 100});
	}
}

// @debug list.length(map.get($colors, 'light', 'text'));
