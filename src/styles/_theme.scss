@use 'sass:map';
@use 'sass:color';
@use 'sass:math';

$colors: ();

// any miscellaneous colors can be added here.
$misc: (
	light: (
		surface: (
			900: hsl(var(--h) var(--s) 95%),
		),
	),
	dark: (
		surface: (
			900: hsl(var(--h) var(--s) 10%),
		),
	),
);

/// Base value must be provided to generate the scheme.
$base: hsl(220 50% 50%);

@mixin generate($step, $no, $name, $theme: light) {
	@for $var from (0 - $no) through $no {
		$idx: $var;
		$lightness: null;
		$saturation: #{var(--s)};

		@if $idx >= 0 {
			$idx: 1 + $idx; // for better naming
		}

		@if $theme == light {
			$lightness: min(var(--l) - ($step * $var), 95%);
			@if $name == text {
				$lightness: math.clamp(5%, $step * ($no + 1) + ($idx * $step), 35%);
			}
		} @else if $theme == dark {
			$lightness: max(100% - (var(--l) - ($step * $var)), 5%);
			@if $name == text {
				$lightness: math.clamp(50%, (95% - $step) - ($step * $var), 100%);
			}
		}

		$colors: map.set(
			$colors,
			$theme,
			$name,
			#{$idx * 100},
			hsl(var(--h) #{$saturation} #{$lightness})
		) !global;
	}
}

@mixin color-scheme($type: 'light') {
	@if $misc != null or $misc != () {
		$colors: map.deep-merge($colors, $misc) !global;
	}

	@each $prop, $value in $colors {
		@if type-of($value) != 'map' {
			--#{$prop}: #{$value};
		}
	}

	@each $prop, $value in map.get($colors, $type) {
		@each $shade, $val in $value {
			--#{$prop}-#{$shade}: #{$val};
		}
	}
}

:root {
	--h: #{color.hue($base)};
	--s: #{color.saturation($base)};
	--l: #{color.lightness($base)};
	@include generate(15%, 3, surface);
	@include generate(5%, 3, text, light);
	@include color-scheme();
}

@media (prefers-color-scheme: dark) {
	:root {
		--s: calc(#{color.saturation($base)} - 10%);
		@include generate(15%, 3, surface, dark);
		@include generate(5%, 3, text, dark);
		@include color-scheme(dark);
	}
}

@debug $colors;
